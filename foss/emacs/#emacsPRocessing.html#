<!doctype html>
<html lang="en">	
  <head>
    <meta charset="utf-8">
    <title>using Emacs to develop Reveal.js 3 Slide</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.0.0/css/reveal.min.css" media="all" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.0.0/css/theme/white.min.css" media="all" />
    <!--link rel="stylesheet" href="css/reveal.min.css"-->
    <!--link rel="stylesheet" href="css/theme/default.css" id="theme"-->	
    <!--Add support for earlier versions of Internet Explorer -->
    <!--[if lt IE 9]>
    <script src="lib/js/html5shiv.js"></script>
    <![endif]-->
       </head>
  
  <body>
    <!-- Wrap the entire slide show in a div using the "reveal" class. -->
    <div class="reveal">
      <!-- Wrap all slides in a single "slides" class -->
      <div class="slides">
	
	<!-- ALL SLIDES GO HERE -->
	<!-- Each section element contains an individual slide -->
	<section id="title-page">
	  <h1>using Emacs to develop</h1>
	  <section>	  
	    <p>Processing & Arduino</p>
	    <p>by Shelandy Ting
	  </section>
	  <section>
	    <p>powered by Emacs + <a href="https://github.com/hakimel/reveal.js/">reveal.js</a> + github
          </section>
	</section>

	<section>
	  <h1>Why Processing/Arduino</h1>
	  <section>
	    Why starting from Processing/Arduino insetad of other languages?
          </section>
          <section>
	    <p>it is easy ad quick way for beginners to learn drawing things(Processing) and
	      making interaction in physical things(Arduinio)</p>
	  </section>
          <section>
	    <p>the learning experience of Processing(Java-based) or
	      Arduinio (C-based) can be reused in the journery of
	      leaning Java/C and something else later
          </section>	  
	</section>

	<section>
	  <h1>Built-in IDE?</h1>
	  <section>
	    <p>Is built-in Processing/Arduino IDE powerful enough?</p>	   
	  </section>
	  <section>No!</section>
	</section>

	<section>
	  <h2>Define "Powerful Enough"</h2>
	  <section>
	    know the relationship of an object (variable, class, file,...) in the coding context 
          </section>
          <section>
	    <ul>
	      <li>Static relationship (e.g., scope in decalration hierachy)
	      <li>Dynamic relationship (e.g., calling)
	      <li>Good Context/content view switching
	      <li>Semantic relationship (e.g., error mapping during compilation and running)
	    </ul>
          </section>
	</section>
	
	<section>
	  <h1>Why Emacs</h1>
	  <section>
	    instead of other IDEs (Eclipse, IntelliJ...?)
	  </section>
	  <section>
	    <p>emacs is protable, lightweighted (e.g., fast), yet powerful</p>
	  </section>
	  <section>
	    <p>Emacs is a good platform (instead of just being an editor), so the learning experience of using it can be
	      applied to other tasks
	  </section>
	  <section>
	    E.g., I used the Emacs to compose this HTML5 presentation using reveal.js, where I do not need to learn javascript
	    yet I can easily comne up an nice interactive sides for presentation.  
          </section>
	</section>

	<section>
	  <h1>Requirement</h1>
	  <section>
	    for using emacs to develop Processing/Arduino
	  </section>
	  <section>
	    <ul>
	      <li>software:  </li>
	      Emacs and the relevant packages
	      <li>hardware (optional, only if you want):</li>
	      Arduino board
	    </ul>
          </section>
	</section>

        <section>
	  <h2>installation procedure</h2>
	  <ol>
	    <li><p>download the emacs</li>	
	    <li><p>install the required packages:(ecb, xrefactory...) </p>
	    <li>configurfate the init.el file for each package
	  </ol>
        </section>	  

	<section>
	  <h1>Download Emacs</h1>
	  <ul>
	    <li>Linux
	      should be able to download using whatever package system
	      (.rpm, .pkg...) 
	    <li>Windows
	    <li>OSX
	  </ul>
	</section>
	<section>
	  <h2>file name and location of emacs configuration file</h2>
	  <ul>
	    <li>Linux</li>
	    ~/.emcas.d/init.el
	    <li>Windows
	    <li>OSX
	  </ul>
	</section>
	
	<section>
	  emacs.d/.init.el package repository setting sample 
	  <pre><code>
(when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list 'package-archives
    '("marmalade" . "http://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives
    '("melpa" . "https://melpa.org/packages/"))
    (package-initialize)
    )
</code></pre>
</section>

<section>
  <h1>Install Packages</h1>
  <ul>
    <li>packages using the package management system
      <ul>
	<li>ecb
      </ul>
    <li>"Unofficial/external" packages by maunal installation 
      <ul>
	<li>xrefactory
      </ul>
  </ul>
</section>

<section> 
  <h2>Keys, keys</h2>
  Some basic convention to describe key combination
  <p><ul>
    <li>c-</li>"control" key with other key
    <li>s-</li>"shift" with other key
    <li>m</li>"meta" with other key. 
    <ul>
      <li>In windows/linux: "Alt"
      <li>in OSX: <>
    </ul>
  </ul>
  <p>c-d means control-d
</section>

<section>
  <h2>Runing Package Management</h2>
  <section> 
    <ol>
      <li>Emacs Main Menu ->
      <li>Options ->
      <li>Manage Emncas Packages ->
  </section> 
  <section>
    <ul>
      <li>use arrow keys to navigate among package listing
      <LI>C-s to search, for example "ecb"
      <li>
      <ul>
	<li>key "i" to select the item under the cursor
	<li>key "u" to unselect
	<li>key "x" to install all selected pacjages
      </ul>
  </ul>
  <p>let it finish the download and compilation
  <p>then quit (main menu -> file ->Quit) the emacs and relaunch
  </section>
</section>

<section> 
<h2>install xrefactory</h2>

<p>download Visit internal slide<a href="#/tilte-page"> 2</a>
  press s key to see the note
  <aside class="notes">
    I'm your Notes :)
  </aside>
</section>

<section>
  <h1>Slide 3 note</h1>
  <p>How does one revisit an arbitrary slide in code?</p>
  <p>Visit internal slide<a href="#/tilte-page"> 2</a>
    press s key to see the note
    <aside class="notes">
      I'm your Notes :)
    </aside>
</section>

<section data-markdown>
  <script type="text/template">
    ## Here comes Markdown
  </script>
</section>

<section>
  jQuery Code Sample
  <pre><code>
      $(function () {
      $('a').click(function(event) {
      alert('Thanks for visiting!'');
      });
      });
  </code></pre>
</section>

<section>
  <h1>Powerful IDE revisied</h1>
  <section>
    know the relationship of an object (variable, class, file,...) in the coding context 
  </section>
  <section>
    Static relationship (e.g., scope in decalration hierachy) 
    <ul>
  </section>
  
  <section>
    mapping dymamic relationship (e.g., calling)
    
  </section>
  <section>
    dual Context/Content view and switching
    <ul>
      <li>ECB hierarchy windows(Context) + code window (Content)
      <li>code folding/unfolding (hide-region or ECB/jdee mode)
    </UL>
  </section>
  <section>
    refactoring 
  </section>
  <section>
    Semantic relationship (e.g., compilation and running)
    <ul>
      <li>show line number of error</li> (requires
      complier/symbol table integration)
      <LI>clickable meant to jump back to the particular
	code location 
      <li>show content of variables (w/ debugger) 
    </ul>
  </section>
  
</section>

<section id="TOC">
  <h1>table of content</h1>
  <p>Slide 2 discussed here</p>
  <p>See  and <br>
    http://www.sitepoint.com/creating-slick-html-presentations-using-reveal-js/<p>	    
</section>

<section>
  <p>Math Formula</p>
  $\cos (2\theta) = \cos^2 \theta - \sin^2 \theta$
  <p>https://github.com/hakimel/reveal.js/</p>
</section>
</div>
</div>
<!--script src="lib/js/head.min.js"></script>
<!--script src="js/reveal.min.js"></script-->
				     <script src="https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.0.0/lib/js/head.min.js"></script>
				     <script src="https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.0.0/js/reveal.min.js"></script>
				     
				     <script>
				       // Required, even if empty.
				       Reveal.initialize({

				       // other options ...
				       math: {
				       mathjax: 'http://cdn.mathjax.org/mathjax/latest/MathJax.js',
				       config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html
				       },
				       dependencies: [{
				       src: 'plugin/math/math.js',
				       async: true
				       }]
				       
				       });
				     </script>
</body>
</html>
